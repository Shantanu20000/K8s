Sarad sir

controlplane $ vim frontend.yml 
controlplane $ cat frontend.yml 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend-app
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: frontend-app
    spec:
      containers:
      - name: frontend-app
        image: piyu5233/frontendapp:latest
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
spec:
  selector:
    app: frontend-app
  ports:
  - name: http
    targetPort: 80
    port: 80
  type: LoadBalancer
controlplane $ cat backend.yml 
apiVersion: apps/v1
kind: Deployment  
metadata:
  name: backend-app
spec: 
  replicas: 2
  selector:
    matchLabels:
      app: backend-app
  strategy: 
    type: RollingUpdate 
  template: 
    metadata: 
      labels:
        app: backend-app 
    spec:
      containers:
      - name: backend-app 
        image: piyu5233/backendapp:latest
        ports:
        - name: java
          containerPort: 8080
          protocol: TCP
---
apiVersion: v1 
kind: Service 
metadata: 
  name: backend-service
spec: 
  selector: 
    app: backend-app 
  ports: 
  - name: http 
    targetPort: 80 
    port: 80 
  type: ClusterIP 






Chat GPT

# tomcat-deployment.yaml

# Define the deployment for the Tomcat application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tomcat-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tomcat
  template:
    metadata:
      labels:
        app: tomcat
    spec:
      containers:
      - name: tomcat
        image: shan20000/k8s_3teir:tomcat
        ports:
        - containerPort: 8080
        env:
        - name: MYSQL_HOST
          value: mysql-service
        - name: MYSQL_PORT
          value: "3306"
        # Add any other environment variables your Tomcat application needs

---
# mysql-deployment.yaml

# Define the deployment for the MySQL database
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: shan20000/k8s_3teir:mysql
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: "4321"
        # Add any other environment variables or volume mounts needed for MySQL data persistence

---
# mysql-service.yaml

# Define a service to expose MySQL within the Kubernetes cluster
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  selector:
    app: mysql
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306

Next step as follow

	# kubeclt apply -f filename.yml
	# kubectl get pod -o wide    
		copy MySQL pods ip 

	# kubectl expose tomcat-deployment-7ddd8857c9-7qr8f --type=LoadBalancer --port=8080
	# kubectl exec -it tomcat-deployment-7ddd8857c9-7qr8f /bin/bash
	you change the context.xml
	# vi conf/context.xml
paste the MySQL Ip we copy above in //copiedip:3306/studentapp/
	:wq
	# ./bin/catalina.sh start
	
	Hit the instance ip with port to crome
http//101.121.42.12:32410/student